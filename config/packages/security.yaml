security:
    enable_authenticator_manager: true

    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    providers:
        api_user:
            entity:
                class: App\Core\User\Entity\User
                property: email
    firewalls:
        login:
            pattern: ^/api/v1/login
            stateless: true
            json_login:
                check_path: /api/v1/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api:
            pattern:   ^/api/v1
            stateless: true
            jwt: ~

    access_control:
        - { path: ^/api/v1/login,               roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/register,            roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/listings,            roles: PUBLIC_ACCESS, methods: ['GET'] }
        - { path: ^/api/v1/search,              roles: PUBLIC_ACCESS, methods: ['GET'] }
        - { path: ^/api/v1/structure-types,     roles: PUBLIC_ACCESS, methods: ['GET'] }
        - { path: ^/api/v1/amenities,           roles: PUBLIC_ACCESS, methods: ['GET'] }
        - { path: ^/api/v1,                     roles: IS_AUTHENTICATED_FULLY }

#when@test:
#    security:
#        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
#            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
#                algorithm: auto
#                cost: 4 # Lowest possible value for bcrypt
#                time_cost: 3 # Lowest possible value for argon
#                memory_cost: 10 # Lowest possible value for argon
